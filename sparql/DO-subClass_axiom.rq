# Return detailed subClassOf Axioms
# By J. Allen Baron, 2022-01-26

# NOTE:
# single letter variables are placeholders and ignored

PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?id ?label ?parent ?type
		?group_type ?group_member ?member_type ?mr_prop ?mr_target ?mc_group_type
		?pr_onProp ?pr_some ?pr_some_group ?pr_some_member
		?pr_onClass ?pr_onClass_group ?pr_onClass_member
WHERE {
	?class oboInOwl:id ?id ;
        rdfs:label ?label ;
        rdfs:subClassOf ?parent .
	FILTER( isBlank(?parent) )
	FILTER( STRSTARTS( STR(?class), "http://purl.obolibrary.org/obo/DOID_" ) )

	?parent a ?type .

	# extract info from top-level blank classes
	OPTIONAL {
		FILTER( ?type = owl:Class )

		# identify grouping type
		OPTIONAL {
			?parent owl:intersectionOf ?var1
			BIND( owl:intersectionOf AS ?group_type )
		}
		OPTIONAL {
			?parent owl:unionOf ?var1
			BIND( owl:unionOf AS ?group_type )
		}

		# # identify grouping type --> this works but takes 5x as long
		# OPTIONAL {
		# 	?parent ?group_type ?var1
		# 	VALUES ?group_type { owl:intersectionOf owl:unionOf }
		# }

		# identify members (likely classes/restrictions)
		?parent (owl:intersectionOf|owl:unionOf) / ( rdf:first | (rdf:rest/rdf:first)+ ) ?group_member .
		?group_member a ?member_type .
	
		# list ONLY group type for level-2 blank classes (member class = mc)
		OPTIONAL {
			FILTER( isBlank(?group_member) && ?member_type = owl:Class )
			OPTIONAL {
				?group_member owl:intersectionOf ?var2
				BIND( owl:intersectionOf AS ?mc_group_type )
			}
			OPTIONAL {
				?group_member owl:unionOf ?var2
				BIND( owl:unionOf AS ?mc_group_type )
			}
		}

		# list directly-linked member restriction (mr) properties and targets
		OPTIONAL { 
			FILTER( ?member_type = owl:Restriction )
			?group_member ?mr_prop ?mr_target
			VALUES ?mr_prop {
				owl:onProperty
				owl:someValuesFrom
				owl:onClass
				owl:intersectionOf
				owl:unionOf
				owl:minQualifiedCardinality
				owl:qualifiedCardinality
			}
		}
	}

	# extract info from top-level Restrictions
	OPTIONAL {
		# list directly-linked parent restriction (pr) properties and targets
		FILTER( ?type = owl:Restriction )
		OPTIONAL { ?parent owl:onProperty ?pr_onProp . }

		# owl:someValuesFrom handler
		OPTIONAL {
			?parent owl:someValuesFrom ?pr_some .
			# for blank classes:
			OPTIONAL {
				FILTER( isBlank(?pr_some) )
				# identify grouping type
				OPTIONAL {
					?pr_some owl:intersectionOf ?var4
					BIND( owl:intersectionOf AS ?pr_some_group )
				}
				OPTIONAL {
					?pr_some owl:unionOf ?var4
					BIND( owl:unionOf AS ?pr_some_group )
				}
				# identify members
				?pr_some (owl:intersectionOf|owl:unionOf) / ( rdf:first | (rdf:rest/rdf:first)+ ) ?pr_some_member .
			}
		}

		# owl:onClass handler
		OPTIONAL { 
			?parent owl:onClass ?pr_onClass .
			# for blank classes:
			OPTIONAL {
				FILTER( isBlank(?pr_onClass) )
				# identify grouping type
				OPTIONAL {
					?pr_onClass owl:intersectionOf ?var6
					BIND( owl:intersectionOf AS ?pr_onClass_group )
				}
				OPTIONAL {
					?pr_onClass owl:unionOf ?var6
					BIND( owl:unionOf AS ?pr_onClass_group )
				}
				# identify members 
				?pr_onClass (owl:intersectionOf|owl:unionOf) / ( rdf:first | (rdf:rest/rdf:first)+ ) ?pr_onClass_member .
			}
		}

		# drop these --> they don't exist at this level, they are down 1 more
		# OPTIONAL { 
		# 	?parent owl:intersectionOf ?pr_group_member .
		# 	BIND( owl:intersectionOf AS ?pr_group )
		# }
		# OPTIONAL { 
		# 	?parent owl:unionOf ?pr_group_member .
		# 	BIND( owl:unionOf AS ?pr_group )
		# }

		# drop these --> not that important
		# OPTIONAL { 
		# 	?parent owl:minQualifiedCardinality ?pr_target .
		# 	BIND( owl:minQualifiedCardinality AS ?pr_prop )
		# }
		# OPTIONAL { 
		# 	?parent owl:qualifiedCardinality ?pr_target .
		# 	BIND( owl:qualifiedCardinality AS ?pr_prop )
		# }

		# list directly-linked parent restriction (pr) properties and targets
		# 	--> same as series of OPTIONALs above but MUCH SLOWER!!!
		# ?parent ?pr_prop ?pr_target .
		# VALUES ?pr_prop {
		# 	owl:onProperty
		# 	owl:someValuesFrom
		# 	owl:onClass
		# 	owl:intersectionOf
		# 	owl:unionOf
		# 	owl:minQualifiedCardinality
		# 	owl:qualifiedCardinality
		# }

		# # extract info from level-2
		# ?pr_target a ?pr_target_type .
		# 
		# # list ONLY group type for level-2 blank classes (member class = mc)
		# OPTIONAL {
		# 	FILTER( isBlank(?pr_target) && ?pr_target_type = owl:Class )
		# 	OPTIONAL {
		# 		?pr_target owl:intersectionOf ?pr_some
		# 		BIND( owl:intersectionOf AS ?group_type )
		# 	}
		# 	OPTIONAL {
		# 		?pr_target owl:unionOf ?pr_some
		# 		BIND( owl:unionOf AS ?group_type )
		# 	}
		# }

		# # identify grouping type for level-2 blank classes and members (likely classes/restrictions)
		# OPTIONAL { 
		# 	FILTER( isBlank(?pr_target) && ?pr_target_type = owl:Class )
		# 	OPTIONAL {
		# 		?pr_target owl:intersectionOf ?pr_some
		# 		BIND( owl:intersectionOf AS ?group_type )
		# 	}
		# 	OPTIONAL {
		# 		?pr_target owl:unionOf ?pr_some
		# 		BIND( owl:unionOf AS ?group_type )
		# 	}
		# 	?pr_target (owl:intersectionOf|owl:unionOf) / ( rdf:first | (rdf:rest/rdf:first)+ ) ?rc_group_member .
		# 	?rc_group_member a ?rc_member_type .
		# }
	}
	
}
