# Return detailed subClassOf Axioms
# By J. Allen Baron, 2022-01-26

# NOTE:
# single letter variables are placeholders and ignored

PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?id ?label ( CONCAT( ?group, GROUP_CONCAT(?member) ) AS ?subClassOf )
WHERE {
	?class oboInOwl:id ?id ;
        rdfs:label ?label ;
        rdfs:subClassOf ?parent .
	FILTER( isBlank(?parent) )
	FILTER( STRSTARTS( STR(?class), "http://purl.obolibrary.org/obo/DOID_" ) )

	?parent a ?type .

	############## extract info from top-level blank classes (c) ###############
	OPTIONAL {
		FILTER( ?type = owl:Class )
		# identify group type
		OPTIONAL {
			?parent owl:intersectionOf ?c .
			BIND( "intersectionOf: " AS ?group )
		}
		OPTIONAL {
			?parent owl:unionOf ?c .
			BIND( "unionOf: " AS ?group )
		}

		# identify members (lvl2)
		?parent (owl:intersectionOf|owl:unionOf) / ( rdf:first | (rdf:rest/rdf:first)+ ) ?c_member .
		?c_member a ?cm_type .

		#### for level-2 defined classes, use label ####
		OPTIONAL {
			FILTER( ?cm_type = owl:Class && !isBlank(?c_member) )
			OPTIONAL { ?c_member rdfs:label ?cm_label . }
			# format: '<label> (<clipped URI>)'
			BIND(
				CONCAT(
					"[",
					?cm_label,
					" (",
					REPLACE( STR(?c_member), ".*/", "" ),
					")]"
				) AS ?member
			)
		}

		#### for level-2 blank classes (cc), use group type (as if it were the member) ####
		OPTIONAL {
			FILTER( ?cm_type = owl:Class && isBlank(?c_member) )
			OPTIONAL {
				?c_member owl:intersectionOf ?cc .
				BIND( REPLACE( STR(?cc), "(N[0-9a-z]{5}).*", "[intersectionOf:$1]" ) AS ?member )
			}
			OPTIONAL {
				?c_member owl:unionOf ?cc .
				BIND( REPLACE( STR(?cc), "(N[0-9a-z]{5}).*", "[unionOf:$1]" ) AS ?member )
			}
		}

		#### for level-2 restrictions (cr): list properties and targets (lvl3) ####
		OPTIONAL {
			FILTER( ?cm_type = owl:Restriction )
			# owl:onProperty handler
			OPTIONAL {
				?c_member owl:onProperty ?cr_prop .
        		OPTIONAL { ?cr_prop rdfs:label ?crp_label . }
				# format: '<label> (<clipped URI>)'
				BIND(
					CONCAT(
						"'",
						?crp_label,
						" (",
						REPLACE( STR(?cr_prop), ".*/", "" ),
						")'"
					) AS ?crp
				)
			}
			# owl:someValuesFrom handler
			OPTIONAL {
				?c_member owl:someValuesFrom ?cr_some .
				# for defined classes
		        OPTIONAL {
		            FILTER( !isBlank(?cr_some) )
		            ?cr_some rdfs:label ?crs_label .
					# format: '<label> (<clipped URI>)'
		            BIND(
		                CONCAT(
							"some '",
		                    ?crs_label,
		                    " (",
		                    REPLACE( STR(?cr_some), ".*[/#]", "" ),
		                    ")'"
		                ) AS ?cr_target
		            )
		        }
				# for level-3 blank classes (crc), use group type (as if it were the member)
				OPTIONAL {
					FILTER( isBlank(?cr_some) )
					# identify group type
					OPTIONAL {
						?cr_some owl:intersectionOf ?crc
						BIND( REPLACE( STR(?crc), "(N[0-9a-z]{5}).*", "some 'intersectionOf:$1'" ) AS ?member )
					}
					OPTIONAL {
						?cr_some owl:unionOf ?crc
						BIND( REPLACE( STR(?crc), "(N[0-9a-z]{5}).*", "some 'unionOf:$1'" ) AS ?member )
					}
					# # identify members
					# ?cr_some (owl:intersectionOf|owl:unionOf) / ( rdf:first | (rdf:rest/rdf:first)+ ) ?crs_member .
				}
			}
			# owl:onClass handler
			OPTIONAL {
				?c_member owl:onClass ?cr_onClass .
				# get qualifier
				OPTIONAL {
					?c_member owl:minQualifiedCardinality ?cr_n .
					BIND( CONCAT( "min ", STR(?cr_n) ) AS ?cro_qual )
				}
				OPTIONAL {
					?c_member owl:qualifiedCardinality ?cr_n .
					BIND( CONCAT( "exactly ", STR(?cr_n) ) AS ?cro_qual )
				}
				# for defined classes, use label
		        OPTIONAL {
		            FILTER( !isBlank(?cr_onClass) )
		            ?cr_onClass rdfs:label ?cro_label .
					# format: '<label> (<clipped URI>)'
		            BIND(
		                CONCAT(
							"'",
		                    ?cro_label,
		                    " (",
		                    REPLACE( STR(?cr_onClass), ".*[/#]", "" ),
		                    ")'"
		                ) AS ?cro_target
		            )
		        }
				# for level-3 blank classes (crc), use group type (as if it were the member)
				OPTIONAL {
					FILTER( isBlank(?cr_onClass) )
					# identify group type
					OPTIONAL {
						?cr_onClass owl:intersectionOf ?crc
						BIND( REPLACE( STR(?crc), "(N[0-9a-z]{5}).*", "'intersectionOf:$1'" ) AS ?cro_target )
					}
					OPTIONAL {
						?cr_onClass owl:unionOf ?crc
						BIND( REPLACE( STR(?crc), "(N[0-9a-z]{5}).*", "'unionOf:$1'" ) AS ?cro_target )
					}
					# # identify members
					# ?cr_onClass (owl:intersectionOf|owl:unionOf) / ( rdf:first | (rdf:rest/rdf:first)+ ) ?cro_member .
				}
				# create full onClass label
				BIND( CONCAT( ?cro_qual, ?cro_target ) AS ?cr_target )
			}
			# create full restriction label
			BIND( CONCAT( "[", ?crp, " ", ?cr_target, "]" ) AS ?member )
		}

	}

	# extract info from top-level Restrictions
	OPTIONAL {
		# list directly-linked parent restriction (pr) properties and targets
		FILTER( ?type = owl:Restriction )
		BIND( "" AS ?group ) # needed to avoid errors in SELECT CONCAT() stmt
		# owl:onProperty handler
		OPTIONAL {
			?parent owl:onProperty ?r_prop .
			OPTIONAL { ?r_prop rdfs:label ?rp_label . }
			# format: '<label> (<clipped URI>)'
			BIND(
				CONCAT(
					"'",
					?rp_label,
					" (",
					REPLACE( STR(?r_prop), ".*/", "" ),
					")'"
				) AS ?rp
			)
		}
		# owl:someValuesFrom handler
		OPTIONAL {
			?parent owl:someValuesFrom ?r_some .
			# for defined classes
			OPTIONAL {
				FILTER( !isBlank(?r_some) )
				?r_some rdfs:label ?rs_label .
				# format: '<label> (<clipped URI>)'
				BIND(
					CONCAT(
						"some '",
						?rs_label,
						" (",
						REPLACE( STR(?r_some), ".*[/#]", "" ),
						")'"
					) AS ?r_target
				)
			}
			# for level-2 blank classes (rc), use group type (as if it were the member)
			OPTIONAL {
				FILTER( isBlank(?r_some) )
				# identify group type
				OPTIONAL {
					?r_some owl:intersectionOf ?rc
					BIND( REPLACE( STR(?rc), "(N[0-9a-z]{5}).*", "some 'intersectionOf:$1'" ) AS ?member )
				}
				OPTIONAL {
					?cr_some owl:unionOf ?rc
					BIND( REPLACE( STR(?rc), "(N[0-9a-z]{5}).*", "some 'unionOf:$1'" ) AS ?member )
				}
				# # identify members
				# ?r_some (owl:intersectionOf|owl:unionOf) / ( rdf:first | (rdf:rest/rdf:first)+ ) ?rs_member .
			}
		}
		# owl:onClass handler
		OPTIONAL {
			?parent owl:onClass ?r_onClass .
			# get qualifier
			OPTIONAL {
				?parent owl:minQualifiedCardinality ?r_n .
				BIND( CONCAT( "min ", STR(?r_n) ) AS ?ro_qual )
			}
			OPTIONAL {
				?parent owl:qualifiedCardinality ?r_n .
				BIND( CONCAT( "exactly ", STR(?r_n) ) AS ?ro_qual )
			}
			# for defined classes, use label
			OPTIONAL {
				FILTER( !isBlank(?r_onClass) )
				?r_onClass rdfs:label ?ro_label .
				# format: '<label> (<clipped URI>)'
				BIND(
					CONCAT(
						"'",
						?ro_label,
						" (",
						REPLACE( STR(?r_onClass), ".*[/#]", "" ),
						")'"
					) AS ?ro_target
				)
			}
			# for level-2 blank classes (rc), use group type (as if it were the member)
			OPTIONAL {
				FILTER( isBlank(?r_onClass) )
				# identify group type
				OPTIONAL {
					?r_onClass owl:intersectionOf ?rc
					BIND( REPLACE( STR(?rc), "(N[0-9a-z]{5}).*", "'intersectionOf:$1'" ) AS ?ro_target )
				}
				OPTIONAL {
					?r_onClass owl:unionOf ?rc
					BIND( REPLACE( STR(?rc), "(N[0-9a-z]{5}).*", "'unionOf:$1'" ) AS ?ro_target )
				}
				# # identify members
				# ?r_onClass (owl:intersectionOf|owl:unionOf) / ( rdf:first | (rdf:rest/rdf:first)+ ) ?ro_member .
			}
			# create full onClass label
			BIND( CONCAT( ?ro_qual, ?ro_target ) AS ?r_target )
		}
		# create full restriction label
		BIND( CONCAT( "[", ?rp, " ", ?r_target, "]" ) AS ?member )
	}

}
# create full lvl-1 class label
GROUP BY ?class ?parent
